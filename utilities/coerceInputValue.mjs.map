{"version":3,"file":"coerceInputValue.js","sourceRoot":"","sources":["../../src/utilities/coerceInputValue.ts"],"names":[],"mappings":"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","sourcesContent":["import { didYouMean } from '../jsutils/didYouMean.js';\nimport { inspect } from '../jsutils/inspect.js';\nimport { invariant } from '../jsutils/invariant.js';\nimport { isIterableObject } from '../jsutils/isIterableObject.js';\nimport { isObjectLike } from '../jsutils/isObjectLike.js';\nimport type { Maybe } from '../jsutils/Maybe.js';\nimport type { Path } from '../jsutils/Path.js';\nimport { addPath, pathToArray } from '../jsutils/Path.js';\nimport { printPathArray } from '../jsutils/printPathArray.js';\nimport { suggestionList } from '../jsutils/suggestionList.js';\n\nimport { GraphQLError } from '../error/GraphQLError.js';\n\nimport type { ValueNode, VariableNode } from '../language/ast.js';\nimport { Kind } from '../language/kinds.js';\n\nimport type {\n  GraphQLDefaultValueUsage,\n  GraphQLInputType,\n} from '../type/definition.js';\nimport {\n  assertLeafType,\n  isInputObjectType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n  isRequiredInputField,\n} from '../type/definition.js';\n\nimport type { VariableValues } from '../execution/values.js';\n\nimport { replaceVariables } from './replaceVariables.js';\n\ntype OnErrorCB = (\n  path: ReadonlyArray<string | number>,\n  invalidValue: unknown,\n  error: GraphQLError,\n) => void;\n\n/**\n * Coerces a JavaScript value given a GraphQL Input Type.\n */\nexport function coerceInputValue(\n  inputValue: unknown,\n  type: GraphQLInputType,\n  onError: OnErrorCB = defaultOnError,\n  hideSuggestions?: Maybe<boolean>,\n): unknown {\n  return coerceInputValueImpl(\n    inputValue,\n    type,\n    onError,\n    undefined,\n    hideSuggestions,\n  );\n}\n\nfunction defaultOnError(\n  path: ReadonlyArray<string | number>,\n  invalidValue: unknown,\n  error: GraphQLError,\n): void {\n  let errorPrefix = 'Invalid value ' + inspect(invalidValue);\n  if (path.length > 0) {\n    errorPrefix += ` at \"value${printPathArray(path)}\"`;\n  }\n  error.message = errorPrefix + ': ' + error.message;\n  throw error;\n}\n\nfunction coerceInputValueImpl(\n  inputValue: unknown,\n  type: GraphQLInputType,\n  onError: OnErrorCB,\n  path: Path | undefined,\n  hideSuggestions?: Maybe<boolean>,\n): unknown {\n  if (isNonNullType(type)) {\n    if (inputValue != null) {\n      return coerceInputValueImpl(\n        inputValue,\n        type.ofType,\n        onError,\n        path,\n        hideSuggestions,\n      );\n    }\n    onError(\n      pathToArray(path),\n      inputValue,\n      new GraphQLError(\n        `Expected non-nullable type \"${inspect(type)}\" not to be null.`,\n      ),\n    );\n    return;\n  }\n\n  if (inputValue == null) {\n    // Explicitly return the value null.\n    return null;\n  }\n\n  if (isListType(type)) {\n    const itemType = type.ofType;\n    if (isIterableObject(inputValue)) {\n      return Array.from(inputValue, (itemValue, index) => {\n        const itemPath = addPath(path, index, undefined);\n        return coerceInputValueImpl(\n          itemValue,\n          itemType,\n          onError,\n          itemPath,\n          hideSuggestions,\n        );\n      });\n    }\n    // Lists accept a non-list value as a list of one.\n    return [\n      coerceInputValueImpl(\n        inputValue,\n        itemType,\n        onError,\n        path,\n        hideSuggestions,\n      ),\n    ];\n  }\n\n  if (isInputObjectType(type)) {\n    if (!isObjectLike(inputValue)) {\n      onError(\n        pathToArray(path),\n        inputValue,\n        new GraphQLError(`Expected type \"${type}\" to be an object.`),\n      );\n      return;\n    }\n\n    const coercedValue: any = {};\n    const fieldDefs = type.getFields();\n\n    for (const field of Object.values(fieldDefs)) {\n      const fieldValue = inputValue[field.name];\n\n      if (fieldValue === undefined) {\n        if (field.defaultValue) {\n          coercedValue[field.name] = coerceDefaultValue(\n            field.defaultValue,\n            field.type,\n            hideSuggestions,\n          );\n        } else if (isNonNullType(field.type)) {\n          const typeStr = inspect(field.type);\n          onError(\n            pathToArray(path),\n            inputValue,\n            new GraphQLError(\n              `Field \"${type}.${field.name}\" of required type \"${typeStr}\" was not provided.`,\n            ),\n          );\n        }\n        continue;\n      }\n\n      coercedValue[field.name] = coerceInputValueImpl(\n        fieldValue,\n        field.type,\n        onError,\n        addPath(path, field.name, type.name),\n        hideSuggestions,\n      );\n    }\n\n    // Ensure every provided field is defined.\n    for (const fieldName of Object.keys(inputValue)) {\n      if (fieldDefs[fieldName] == null) {\n        const suggestions = suggestionList(\n          fieldName,\n          Object.keys(type.getFields()),\n        );\n        onError(\n          pathToArray(path),\n          inputValue,\n          new GraphQLError(\n            `Field \"${fieldName}\" is not defined by type \"${type}\".` +\n              (hideSuggestions ? '' : didYouMean(suggestions)),\n          ),\n        );\n      }\n    }\n\n    if (type.isOneOf) {\n      const keys = Object.keys(coercedValue);\n      if (keys.length !== 1) {\n        onError(\n          pathToArray(path),\n          inputValue,\n          new GraphQLError(\n            `Exactly one key must be specified for OneOf type \"${type}\".`,\n          ),\n        );\n      } else {\n        const key = keys[0];\n        const value = coercedValue[key];\n        if (value === null) {\n          onError(\n            pathToArray(path).concat(key),\n            value,\n            new GraphQLError(`Field \"${key}\" must be non-null.`),\n          );\n        }\n      }\n    }\n\n    return coercedValue;\n  }\n\n  if (isLeafType(type)) {\n    let parseResult;\n\n    // Scalars and Enums determine if an input value is valid via coerceInputValue(),\n    // which can throw to indicate failure. If it throws, maintain a reference\n    // to the original error.\n    try {\n      parseResult = type.coerceInputValue(inputValue, hideSuggestions);\n    } catch (error) {\n      if (error instanceof GraphQLError) {\n        onError(pathToArray(path), inputValue, error);\n      } else {\n        onError(\n          pathToArray(path),\n          inputValue,\n          new GraphQLError(`Expected type \"${type}\". ` + error.message, {\n            originalError: error,\n          }),\n        );\n      }\n      return;\n    }\n    if (parseResult === undefined) {\n      onError(\n        pathToArray(path),\n        inputValue,\n        new GraphQLError(`Expected type \"${type}\".`),\n      );\n    }\n    return parseResult;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n  invariant(false, 'Unexpected input type: ' + inspect(type));\n}\n\n/**\n * Produces a coerced \"internal\" JavaScript value given a GraphQL Value AST.\n *\n * Returns `undefined` when the value could not be validly coerced according to\n * the provided type.\n */\nexport function coerceInputLiteral(\n  valueNode: ValueNode,\n  type: GraphQLInputType,\n  variableValues?: Maybe<VariableValues>,\n  fragmentVariableValues?: Maybe<VariableValues>,\n  hideSuggestions?: Maybe<boolean>,\n): unknown {\n  if (valueNode.kind === Kind.VARIABLE) {\n    const coercedVariableValue = getCoercedVariableValue(\n      valueNode,\n      variableValues,\n      fragmentVariableValues,\n    );\n    if (coercedVariableValue == null && isNonNullType(type)) {\n      return; // Invalid: intentionally return no value.\n    }\n    // Note: This does no further checking that this variable is correct.\n    // This assumes validated has checked this variable is of the correct type.\n    return coercedVariableValue;\n  }\n\n  if (isNonNullType(type)) {\n    if (valueNode.kind === Kind.NULL) {\n      return; // Invalid: intentionally return no value.\n    }\n    return coerceInputLiteral(\n      valueNode,\n      type.ofType,\n      variableValues,\n      fragmentVariableValues,\n      hideSuggestions,\n    );\n  }\n\n  if (valueNode.kind === Kind.NULL) {\n    return null; // Explicitly return the value null.\n  }\n\n  if (isListType(type)) {\n    if (valueNode.kind !== Kind.LIST) {\n      // Lists accept a non-list value as a list of one.\n      const itemValue = coerceInputLiteral(\n        valueNode,\n        type.ofType,\n        variableValues,\n        fragmentVariableValues,\n        hideSuggestions,\n      );\n      if (itemValue === undefined) {\n        return; // Invalid: intentionally return no value.\n      }\n      return [itemValue];\n    }\n    const coercedValue: Array<unknown> = [];\n    for (const itemNode of valueNode.values) {\n      let itemValue = coerceInputLiteral(\n        itemNode,\n        type.ofType,\n        variableValues,\n        fragmentVariableValues,\n        hideSuggestions,\n      );\n      if (itemValue === undefined) {\n        if (\n          itemNode.kind === Kind.VARIABLE &&\n          getCoercedVariableValue(\n            itemNode,\n            variableValues,\n            fragmentVariableValues,\n          ) == null &&\n          !isNonNullType(type.ofType)\n        ) {\n          // A missing variable within a list is coerced to null.\n          itemValue = null;\n        } else {\n          return; // Invalid: intentionally return no value.\n        }\n      }\n      coercedValue.push(itemValue);\n    }\n    return coercedValue;\n  }\n\n  if (isInputObjectType(type)) {\n    if (valueNode.kind !== Kind.OBJECT) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    const coercedValue: { [field: string]: unknown } = {};\n    const fieldDefs = type.getFields();\n    const hasUndefinedField = valueNode.fields.some(\n      (field) => !Object.hasOwn(fieldDefs, field.name.value),\n    );\n    if (hasUndefinedField) {\n      return; // Invalid: intentionally return no value.\n    }\n    const fieldNodes = new Map(\n      valueNode.fields.map((field) => [field.name.value, field]),\n    );\n    for (const field of Object.values(fieldDefs)) {\n      const fieldNode = fieldNodes.get(field.name);\n      if (\n        !fieldNode ||\n        (fieldNode.value.kind === Kind.VARIABLE &&\n          getCoercedVariableValue(\n            fieldNode.value,\n            variableValues,\n            fragmentVariableValues,\n          ) == null)\n      ) {\n        if (isRequiredInputField(field)) {\n          return; // Invalid: intentionally return no value.\n        }\n        if (field.defaultValue) {\n          coercedValue[field.name] = coerceDefaultValue(\n            field.defaultValue,\n            field.type,\n            hideSuggestions,\n          );\n        }\n      } else {\n        const fieldValue = coerceInputLiteral(\n          fieldNode.value,\n          field.type,\n          variableValues,\n          fragmentVariableValues,\n          hideSuggestions,\n        );\n        if (fieldValue === undefined) {\n          return; // Invalid: intentionally return no value.\n        }\n        coercedValue[field.name] = fieldValue;\n      }\n    }\n\n    if (type.isOneOf) {\n      const keys = Object.keys(coercedValue);\n      if (keys.length !== 1) {\n        return; // Invalid: not exactly one key, intentionally return no value.\n      }\n\n      if (coercedValue[keys[0]] === null) {\n        return; // Invalid: value not non-null, intentionally return no value.\n      }\n    }\n\n    return coercedValue;\n  }\n\n  const leafType = assertLeafType(type);\n  try {\n    return leafType.coerceInputLiteral\n      ? leafType.coerceInputLiteral(\n          replaceVariables(valueNode, variableValues, fragmentVariableValues),\n          hideSuggestions,\n        )\n      : leafType.parseLiteral(\n          valueNode,\n          variableValues?.coerced,\n          hideSuggestions,\n        );\n  } catch (_error) {\n    // Invalid: ignore error and intentionally return no value.\n  }\n}\n\n// Retrieves the variable value for the given variable node.\nfunction getCoercedVariableValue(\n  variableNode: VariableNode,\n  variableValues: Maybe<VariableValues>,\n  fragmentVariableValues: Maybe<VariableValues>,\n): unknown {\n  const varName = variableNode.name.value;\n  if (fragmentVariableValues?.sources[varName] !== undefined) {\n    return fragmentVariableValues.coerced[varName];\n  }\n\n  return variableValues?.coerced[varName];\n}\n\n/**\n * @internal\n */\nexport function coerceDefaultValue(\n  defaultValue: GraphQLDefaultValueUsage,\n  type: GraphQLInputType,\n  hideSuggestions?: Maybe<boolean>,\n): unknown {\n  // Memoize the result of coercing the default value in a hidden field.\n  let coercedValue = (defaultValue as any)._memoizedCoercedValue;\n  if (coercedValue === undefined) {\n    coercedValue = defaultValue.literal\n      ? coerceInputLiteral(\n          defaultValue.literal,\n          type,\n          undefined,\n          undefined,\n          hideSuggestions,\n        )\n      : defaultValue.value;\n    (defaultValue as any)._memoizedCoercedValue = coercedValue;\n  }\n  return coercedValue;\n}\n"]}