{"version":3,"file":"lexicographicSortSchema.js","sourceRoot":"","sources":["../../src/utilities/lexicographicSortSchema.ts"],"names":[],"mappings":"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","sourcesContent":["import { inspect } from '../jsutils/inspect.js';\nimport { invariant } from '../jsutils/invariant.js';\nimport type { Maybe } from '../jsutils/Maybe.js';\nimport { naturalCompare } from '../jsutils/naturalCompare.js';\nimport type { ObjMap } from '../jsutils/ObjMap.js';\n\nimport type {\n  GraphQLFieldConfigArgumentMap,\n  GraphQLFieldConfigMap,\n  GraphQLInputFieldConfigMap,\n  GraphQLNamedType,\n  GraphQLType,\n} from '../type/definition.js';\nimport {\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  GraphQLInterfaceType,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLUnionType,\n  isEnumType,\n  isInputObjectType,\n  isInterfaceType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n  isScalarType,\n  isUnionType,\n} from '../type/definition.js';\nimport { GraphQLDirective } from '../type/directives.js';\nimport { isIntrospectionType } from '../type/introspection.js';\nimport { GraphQLSchema } from '../type/schema.js';\n\n/**\n * Sort GraphQLSchema.\n *\n * This function returns a sorted copy of the given GraphQLSchema.\n */\nexport function lexicographicSortSchema(schema: GraphQLSchema): GraphQLSchema {\n  const schemaConfig = schema.toConfig();\n  const typeMap = new Map<string, GraphQLNamedType>(\n    sortByName(schemaConfig.types).map((type) => [\n      type.name,\n      sortNamedType(type),\n    ]),\n  );\n\n  return new GraphQLSchema({\n    ...schemaConfig,\n    types: Array.from(typeMap.values()),\n    directives: sortByName(schemaConfig.directives).map(sortDirective),\n    query: replaceMaybeType(schemaConfig.query),\n    mutation: replaceMaybeType(schemaConfig.mutation),\n    subscription: replaceMaybeType(schemaConfig.subscription),\n  });\n\n  function replaceType<T extends GraphQLType>(type: T): T {\n    if (isListType(type)) {\n      // @ts-expect-error\n      return new GraphQLList(replaceType(type.ofType));\n    } else if (isNonNullType(type)) {\n      // @ts-expect-error\n      return new GraphQLNonNull(replaceType(type.ofType));\n    }\n    // @ts-expect-error FIXME: TS Conversion\n    return replaceNamedType<GraphQLNamedType>(type);\n  }\n\n  function replaceNamedType<T extends GraphQLNamedType>(type: T): T {\n    return typeMap.get(type.name) as T;\n  }\n\n  function replaceMaybeType<T extends GraphQLNamedType>(\n    maybeType: Maybe<T>,\n  ): Maybe<T> {\n    return maybeType && replaceNamedType(maybeType);\n  }\n\n  function sortDirective(directive: GraphQLDirective) {\n    const config = directive.toConfig();\n    return new GraphQLDirective({\n      ...config,\n      locations: sortBy(config.locations, (x) => x),\n      args: sortArgs(config.args),\n    });\n  }\n\n  function sortArgs(args: GraphQLFieldConfigArgumentMap) {\n    return sortObjMap(args, (arg) => ({\n      ...arg,\n      type: replaceType(arg.type),\n    }));\n  }\n\n  function sortFields(fieldsMap: GraphQLFieldConfigMap<unknown, unknown>) {\n    return sortObjMap(fieldsMap, (field) => ({\n      ...field,\n      type: replaceType(field.type),\n      args: field.args && sortArgs(field.args),\n    }));\n  }\n\n  function sortInputFields(fieldsMap: GraphQLInputFieldConfigMap) {\n    return sortObjMap(fieldsMap, (field) => ({\n      ...field,\n      type: replaceType(field.type),\n    }));\n  }\n\n  function sortTypes<T extends GraphQLNamedType>(\n    array: ReadonlyArray<T>,\n  ): Array<T> {\n    return sortByName(array).map(replaceNamedType);\n  }\n\n  function sortNamedType(type: GraphQLNamedType): GraphQLNamedType {\n    if (isScalarType(type) || isIntrospectionType(type)) {\n      return type;\n    }\n    if (isObjectType(type)) {\n      const config = type.toConfig();\n      return new GraphQLObjectType({\n        ...config,\n        interfaces: () => sortTypes(config.interfaces),\n        fields: () => sortFields(config.fields),\n      });\n    }\n    if (isInterfaceType(type)) {\n      const config = type.toConfig();\n      return new GraphQLInterfaceType({\n        ...config,\n        interfaces: () => sortTypes(config.interfaces),\n        fields: () => sortFields(config.fields),\n      });\n    }\n    if (isUnionType(type)) {\n      const config = type.toConfig();\n      return new GraphQLUnionType({\n        ...config,\n        types: () => sortTypes(config.types),\n      });\n    }\n    if (isEnumType(type)) {\n      const config = type.toConfig();\n      return new GraphQLEnumType({\n        ...config,\n        values: sortObjMap(config.values, (value) => value),\n      });\n    }\n    if (isInputObjectType(type)) {\n      const config = type.toConfig();\n      return new GraphQLInputObjectType({\n        ...config,\n        fields: () => sortInputFields(config.fields),\n      });\n    }\n    /* c8 ignore next 3 */\n    // Not reachable, all possible types have been considered.\n    invariant(false, 'Unexpected type: ' + inspect(type));\n  }\n}\n\nfunction sortObjMap<T, R>(\n  map: ObjMap<T>,\n  sortValueFn: (value: T) => R,\n): ObjMap<R> {\n  const sortedMap = Object.create(null);\n  for (const key of Object.keys(map).sort(naturalCompare)) {\n    sortedMap[key] = sortValueFn(map[key]);\n  }\n  return sortedMap;\n}\n\nfunction sortByName<T extends { readonly name: string }>(\n  array: ReadonlyArray<T>,\n): Array<T> {\n  return sortBy(array, (obj) => obj.name);\n}\n\nfunction sortBy<T>(\n  array: ReadonlyArray<T>,\n  mapToKey: (item: T) => string,\n): Array<T> {\n  return array.slice().sort((obj1, obj2) => {\n    const key1 = mapToKey(obj1);\n    const key2 = mapToKey(obj2);\n    return naturalCompare(key1, key2);\n  });\n}\n"]}