{"version":3,"file":"ValuesOfCorrectTypeRule.js","sourceRoot":"","sources":["../../../src/validation/rules/ValuesOfCorrectTypeRule.ts"],"names":[],"mappings":"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","sourcesContent":["import { didYouMean } from '../../jsutils/didYouMean.js';\nimport { inspect } from '../../jsutils/inspect.js';\nimport { suggestionList } from '../../jsutils/suggestionList.js';\n\nimport { GraphQLError } from '../../error/GraphQLError.js';\n\nimport type {\n  ObjectFieldNode,\n  ObjectValueNode,\n  ValueNode,\n  VariableDefinitionNode,\n} from '../../language/ast.js';\nimport { Kind } from '../../language/kinds.js';\nimport { print } from '../../language/printer.js';\nimport type { ASTVisitor } from '../../language/visitor.js';\n\nimport type { GraphQLInputObjectType } from '../../type/definition.js';\nimport {\n  getNamedType,\n  getNullableType,\n  isInputObjectType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n  isRequiredInputField,\n} from '../../type/definition.js';\n\nimport { replaceVariables } from '../../utilities/replaceVariables.js';\n\nimport type { ValidationContext } from '../ValidationContext.js';\n\n/**\n * Value literals of correct type\n *\n * A GraphQL document is only valid if all value literals are of the type\n * expected at their position.\n *\n * See https://spec.graphql.org/draft/#sec-Values-of-Correct-Type\n */\nexport function ValuesOfCorrectTypeRule(\n  context: ValidationContext,\n): ASTVisitor {\n  let variableDefinitions: { [key: string]: VariableDefinitionNode } = {};\n\n  return {\n    OperationDefinition: {\n      enter() {\n        variableDefinitions = {};\n      },\n    },\n    VariableDefinition(definition) {\n      variableDefinitions[definition.variable.name.value] = definition;\n    },\n    ListValue(node) {\n      // Note: TypeInfo will traverse into a list's item type, so look to the\n      // parent input type to check if it is a list.\n      const type = getNullableType(context.getParentInputType());\n      if (!isListType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      }\n    },\n    ObjectValue(node) {\n      const type = getNamedType(context.getInputType());\n      if (!isInputObjectType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      }\n      // Ensure every required field exists.\n      const fieldNodeMap = new Map(\n        node.fields.map((field) => [field.name.value, field]),\n      );\n      for (const fieldDef of Object.values(type.getFields())) {\n        const fieldNode = fieldNodeMap.get(fieldDef.name);\n        if (!fieldNode && isRequiredInputField(fieldDef)) {\n          const typeStr = inspect(fieldDef.type);\n          context.reportError(\n            new GraphQLError(\n              `Field \"${type}.${fieldDef.name}\" of required type \"${typeStr}\" was not provided.`,\n              { nodes: node },\n            ),\n          );\n        }\n      }\n\n      if (type.isOneOf) {\n        validateOneOfInputObject(\n          context,\n          node,\n          type,\n          fieldNodeMap,\n          variableDefinitions,\n        );\n      }\n    },\n    ObjectField(node) {\n      const parentType = getNamedType(context.getParentInputType());\n      const fieldType = context.getInputType();\n      if (!fieldType && isInputObjectType(parentType)) {\n        const suggestions = context.hideSuggestions\n          ? []\n          : suggestionList(\n              node.name.value,\n              Object.keys(parentType.getFields()),\n            );\n        context.reportError(\n          new GraphQLError(\n            `Field \"${node.name.value}\" is not defined by type \"${parentType}\".` +\n              didYouMean(suggestions),\n            { nodes: node },\n          ),\n        );\n      }\n    },\n    NullValue(node) {\n      const type = context.getInputType();\n      if (isNonNullType(type)) {\n        context.reportError(\n          new GraphQLError(\n            `Expected value of type \"${inspect(type)}\", found ${print(node)}.`,\n            { nodes: node },\n          ),\n        );\n      }\n    },\n    EnumValue: (node) => isValidValueNode(context, node),\n    IntValue: (node) => isValidValueNode(context, node),\n    FloatValue: (node) => isValidValueNode(context, node),\n    StringValue: (node) => isValidValueNode(context, node),\n    BooleanValue: (node) => isValidValueNode(context, node),\n  };\n}\n\n/**\n * Any value literal may be a valid representation of a Scalar, depending on\n * that scalar type.\n */\nfunction isValidValueNode(context: ValidationContext, node: ValueNode): void {\n  // Report any error at the full type expected by the location.\n  const locationType = context.getInputType();\n  if (!locationType) {\n    return;\n  }\n\n  const type = getNamedType(locationType);\n\n  if (!isLeafType(type)) {\n    const typeStr = inspect(locationType);\n    context.reportError(\n      new GraphQLError(\n        `Expected value of type \"${typeStr}\", found ${print(node)}.`,\n        { nodes: node },\n      ),\n    );\n    return;\n  }\n\n  // Scalars and Enums determine if a literal value is valid via coerceInputLiteral(),\n  // which may throw or return undefined to indicate an invalid value.\n  try {\n    const parseResult = type.coerceInputLiteral\n      ? type.coerceInputLiteral(replaceVariables(node), context.hideSuggestions)\n      : type.parseLiteral(node, undefined, context.hideSuggestions);\n    if (parseResult === undefined) {\n      const typeStr = inspect(locationType);\n      context.reportError(\n        new GraphQLError(\n          `Expected value of type \"${typeStr}\", found ${print(node)}.`,\n          { nodes: node },\n        ),\n      );\n    }\n  } catch (error) {\n    const typeStr = inspect(locationType);\n    if (error instanceof GraphQLError) {\n      context.reportError(error);\n    } else {\n      context.reportError(\n        new GraphQLError(\n          `Expected value of type \"${typeStr}\", found ${print(node)}; ` +\n            error.message,\n          { nodes: node, originalError: error },\n        ),\n      );\n    }\n  }\n}\n\nfunction validateOneOfInputObject(\n  context: ValidationContext,\n  node: ObjectValueNode,\n  type: GraphQLInputObjectType,\n  fieldNodeMap: Map<string, ObjectFieldNode>,\n  variableDefinitions: { [key: string]: VariableDefinitionNode },\n): void {\n  const keys = Array.from(fieldNodeMap.keys());\n  const isNotExactlyOneField = keys.length !== 1;\n\n  if (isNotExactlyOneField) {\n    context.reportError(\n      new GraphQLError(\n        `OneOf Input Object \"${type}\" must specify exactly one key.`,\n        { nodes: [node] },\n      ),\n    );\n    return;\n  }\n\n  const value = fieldNodeMap.get(keys[0])?.value;\n  const isNullLiteral = !value || value.kind === Kind.NULL;\n  const isVariable = value?.kind === Kind.VARIABLE;\n\n  if (isNullLiteral) {\n    context.reportError(\n      new GraphQLError(`Field \"${type}.${keys[0]}\" must be non-null.`, {\n        nodes: [node],\n      }),\n    );\n    return;\n  }\n\n  if (isVariable) {\n    const variableName = value.name.value;\n    const definition = variableDefinitions[variableName];\n    const isNullableVariable = definition.type.kind !== Kind.NON_NULL_TYPE;\n\n    if (isNullableVariable) {\n      context.reportError(\n        new GraphQLError(\n          `Variable \"$${variableName}\" must be non-nullable to be used for OneOf Input Object \"${type}\".`,\n          { nodes: [node] },\n        ),\n      );\n    }\n  }\n}\n"]}